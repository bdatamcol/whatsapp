{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/EQUIPO%202/whatsapp-clean/src/lib/whatsapp/whatsapp.client.ts"],"sourcesContent":["'use strict';\r\n\r\nimport { Contact } from \"@/types/whatsapp\";\r\n\r\nconst API_VERSION = 'v19.0';\r\n\r\nexport default class WhatsAppClient {\r\n  private readonly baseUrl: string;\r\n\r\n  constructor() {\r\n    if (!process.env.WHATSAPP_PHONE_NUMBER_ID) {\r\n      throw new Error('Missing WHATSAPP_PHONE_NUMBER_ID in environment');\r\n    }\r\n    this.baseUrl = `https://graph.facebook.com/${API_VERSION}/${process.env.WHATSAPP_PHONE_NUMBER_ID}`;\r\n  }\r\n\r\n  // src/lib/whatsapp/whatsapp.client.ts\r\nasync getContacts(): Promise<Contact[]> {\r\n  try {\r\n    // En producci√≥n, aqu√≠ llamar√≠as a la API de WhatsApp/Meta\r\n    // Pero para desarrollo, podemos simular datos o conectar a una DB\r\n    const mockContacts: Contact[] = [\r\n      {\r\n        id: \"521234567890\",\r\n        name: \"Cliente Ejemplo\",\r\n        lastMessage: \"Hola, ¬øc√≥mo est√°s?\",\r\n        unread: 2,\r\n        lastMessageTime: new Date()\r\n      }\r\n    ];\r\n    return mockContacts;\r\n    \r\n    // Para conexi√≥n real con WhatsApp API (descomentar cuando est√© listo):\r\n    // const response = await fetch(`${this.baseUrl}/contacts`, {\r\n    //   headers: this.getHeaders()\r\n    // });\r\n    // return await this.handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error fetching contacts:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n  async sendText(to: string, message: string) {\r\n    const response = await fetch(`${this.baseUrl}/messages`, {\r\n      method: 'POST',\r\n      headers: this.getHeaders(),\r\n      body: JSON.stringify({\r\n        messaging_product: \"whatsapp\",\r\n        recipient_type: \"individual\",\r\n        to: to,\r\n        text: { body: message }\r\n      }),\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  private getHeaders() {\r\n    if (!process.env.WHATSAPP_ACCESS_TOKEN) {\r\n      throw new Error('Missing WHATSAPP_ACCESS_TOKEN in environment');\r\n    }\r\n    return {\r\n      'Authorization': `Bearer ${process.env.WHATSAPP_ACCESS_TOKEN}`,\r\n      'Content-Type': 'application/json',\r\n    };\r\n  }\r\n\r\n  private async handleResponse(response: Response) {\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      console.error('WhatsApp API Error:', error);\r\n      throw new Error(error.error?.message || 'WhatsApp API error');\r\n    }\r\n    return response.json();\r\n  }\r\n}\r\n// üî• Nada m√°s despu√©s de aqu√≠. ¬°No m√°s module.exports!\r\n"],"names":[],"mappings":";;;AAAA;AAIA,MAAM,cAAc;AAEL,MAAM;IACF,QAAgB;IAEjC,aAAc;QACZ,uCAA2C;;QAE3C;QACA,IAAI,CAAC,OAAO,GAAG,CAAC,2BAA2B,EAAE,YAAY,CAAC,kDAAwC;IACpG;IAEA,sCAAsC;IACxC,MAAM,cAAkC;QACtC,IAAI;YACF,0DAA0D;YAC1D,kEAAkE;YAClE,MAAM,eAA0B;gBAC9B;oBACE,IAAI;oBACJ,MAAM;oBACN,aAAa;oBACb,QAAQ;oBACR,iBAAiB,IAAI;gBACvB;aACD;YACD,OAAO;QAEP,uEAAuE;QACvE,6DAA6D;QAC7D,+BAA+B;QAC/B,MAAM;QACN,8CAA8C;QAChD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,MAAM;QACR;IACF;IAEE,MAAM,SAAS,EAAU,EAAE,OAAe,EAAE;QAC1C,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACvD,QAAQ;YACR,SAAS,IAAI,CAAC,UAAU;YACxB,MAAM,KAAK,SAAS,CAAC;gBACnB,mBAAmB;gBACnB,gBAAgB;gBAChB,IAAI;gBACJ,MAAM;oBAAE,MAAM;gBAAQ;YACxB;QACF;QACA,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B;IAEQ,aAAa;QACnB,uCAAwC;;QAExC;QACA,OAAO;YACL,iBAAiB,CAAC,OAAO,wQAAqC;YAC9D,gBAAgB;QAClB;IACF;IAEA,MAAc,eAAe,QAAkB,EAAE;QAC/C,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;YACjC,QAAQ,KAAK,CAAC,uBAAuB;YACrC,MAAM,IAAI,MAAM,MAAM,KAAK,EAAE,WAAW;QAC1C;QACA,OAAO,SAAS,IAAI;IACtB;AACF,EACA,uDAAuD","debugId":null}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/EQUIPO%202/whatsapp-clean/src/app/api/whatsapp/contacts/route.ts"],"sourcesContent":["// src/app/api/whatsapp/contacts/route.ts\r\nimport { NextResponse } from 'next/server';\r\nimport WhatsAppClient from '@/lib/whatsapp/whatsapp.client';\r\nimport { Contact } from '@/types/whatsapp.d';\r\n\r\n// GET: Obtener contactos\r\nexport async function GET() {\r\n  const client = new WhatsAppClient();\r\n  try {\r\n    // Mock para pruebas (reempl√°zalo con tu l√≥gica real)\r\n    const mockContacts: Contact[] = [\r\n      {\r\n        id: \"1234567890\",\r\n        name: \"Cliente Ejemplo\",\r\n        lastMessage: \"Hola, ¬øc√≥mo est√°s?\",\r\n        unread: 2,\r\n        lastMessageTime: new Date().toISOString()\r\n      }\r\n    ];\r\n    return NextResponse.json(mockContacts);\r\n\r\n    // Para producci√≥n, usa esto:\r\n    // const contacts = await client.getContacts();\r\n    // return NextResponse.json(contacts);\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Error al obtener contactos' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST: Crear un nuevo contacto (opcional)\r\nexport async function POST(request: Request) {\r\n  // Implementa seg√∫n tus necesidades\r\n  return NextResponse.json({ error: 'M√©todo no implementado' }, { status: 501 });\r\n}"],"names":[],"mappings":"AAAA,yCAAyC;;;;;AACzC;AACA;;;AAIO,eAAe;IACpB,MAAM,SAAS,IAAI,8IAAA,CAAA,UAAc;IACjC,IAAI;QACF,qDAAqD;QACrD,MAAM,eAA0B;YAC9B;gBACE,IAAI;gBACJ,MAAM;gBACN,aAAa;gBACb,QAAQ;gBACR,iBAAiB,IAAI,OAAO,WAAW;YACzC;SACD;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAEzB,6BAA6B;IAC7B,+CAA+C;IAC/C,sCAAsC;IACxC,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAgB;IACzC,mCAAmC;IACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAyB,GAAG;QAAE,QAAQ;IAAI;AAC9E","debugId":null}}]
}